spring.cloud.stream.bindings.output1.contentType: application/json
spring.cloud.stream.bindings.output2.contentType: application/json
spring.cloud.stream.bindings.output3.contentType: application/json
spring.cloud.stream.bindings.output4.contentType: application/json
spring.cloud.stream.bindings.input4.contentType: application/json
spring.cloud.stream.kafka.streams.binder.configuration.commit.interval.ms: 1000
spring.cloud.stream.kafka.streams.binder.configuration:
  default.key.serde: org.apache.kafka.common.serialization.Serdes$StringSerde
  default.value.serde: org.apache.kafka.common.serialization.Serdes$StringSerde
  application.id: default
spring.cloud.stream.bindings.output1:
  destination: english-counts
  producer:
    headerMode: raw
spring.cloud.stream.bindings.output2:
  destination: french-counts
  producer:
    headerMode: raw
spring.cloud.stream.bindings.output3:
  destination: spanish-counts
  producer:
    headerMode: raw
spring.cloud.stream.bindings.output4:
  destination: unknown-word
  producer:
    headerMode: raw
spring.cloud.stream.bindings.input:
  destination: words
  group: group1
  consumer:
    headerMode: raw
spring.cloud.stream.bindings.input4:
  binder: kafka
  destination: unknown-word
  group: group1
  consumer:
    headerMode: raw
spring.cloud.stream.kafka.bindings.input:
  consumer:
    application.id: app-count-words
#spring.cloud.stream.kafka.bindings.inputAggregation:
#  consumer:
#    application.id: app-count-words

spring.cloud.stream.kafka.streams.binder:
  brokers: ${BROKERS:localhost} #192.168.99.100 #localhost
  zkNodes: ${ZKNODES:localhost} #192.168.99.100 #localhost
spring:
  kafka:
    bootstrap-servers: ${BROKERS:localhost}
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer